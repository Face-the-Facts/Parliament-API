openapi: 3.0.0
info:
  title: Face the Facts API
  description: |
    For this sample, you can use the api key `special-key` to test the authorization filters.
    # Introduction
    This is the Face the Facts API. It's main purpose is to provide the data for our web application at facethefacts.app.
    It may also be used by anyone interested in accordance with [insert license]
    # OpenAPI Specification
    This API is documented in **OpenAPI format**.
    # Cross-Origin Resource Sharing
    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).
    And that allows cross-domain communication from the browser.
    All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.
    # Authentication
    All data is world readable. Write access is restricted to admins.

    Admin access can be gained through the following forms of authentication:
      - API Key
      - HTTP Bearer Authentication
    <!-- ReDoc-Inject: <security-definitions> -->
  contact:
    email: fabi@facethefacts.app
  x-logo:
    url: 'https://facethefacts.github.io/open-api/logo_light.png'
    altText: Face the Facts logo
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 0.0.1
servers:
  - url: 'https://virtserver.swaggerhub.com/Face-the-Facts/REST-API/1.0.0'
    description: SwaggerHub API Auto Mocking
tags:
  - name: Candidates
    description: |
      Everything about candidates
  - name: Controversies
    description: Request for the controversy resource
  - name: Constituencies
    description: |
      Everything about constituencies
  - name: Election
    description: |
      Requests concerning elections.
  - name: Parties
    description: |
      Everything about parties
  - name: Poll
    description: |
      everything about polls
x-tagGroups:
  - name: Main
    tags:
      - Candidates
      - Parties
      - Controversies
  - name: Parliament
    tags:
      - Poll
  - name: Elections
    tags:
      - Election
      - Constituencies
paths:
  /candidates:
    get:
      tags:
        - Candidates
      summary: Retrieve a list of candidates
      description: Returns a list of candidates
      operationId: getCandidates
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/partyIdQueryParam'
      responses:
        '200':
          $ref: '#/components/responses/200Candidates'
        '400':
          $ref: '#/components/responses/400Error'
    post:
      tags:
        - Candidates
      summary: Add a new candidate
      description: Create a new candidate in the database
      operationId: postCandidate
      security:
        - ApiKeyAuth:
            - write
        - BearerAuth:
            - write
      requestBody:
        $ref: '#/components/requestBodies/candidateRequest'
      responses:
        '201':
          $ref: '#/components/responses/201Created'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
  '/candidates/{id}':
    get:
      tags:
        - Candidates
      summary: Retrieve a single candidate
      description: Returns a candidate by ID
      operationId: getCandidate
      parameters:
        - $ref: '#/components/parameters/candidateIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/200Candidate'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
      x-codeSamples:
        - lang: TypeScript
          source: |
            // add typescript code sample
    put:
      tags:
        - Candidates
      summary: Update a candidate
      description: Updates the specified candidate based on request body
      operationId: putCandidate
      security:
        - ApiKeyAuth:
            - write
        - BearerAuth:
            - write
      parameters:
        - $ref: '#/components/parameters/candidateIdPathParam'
      requestBody:
        $ref: '#/components/requestBodies/candidateRequest'
      responses:
        '200':
          $ref: '#/components/responses/200Candidate'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
      x-codeSamples:
        - lang: TypeScript
          source: |
            // add typescript code sample
    delete:
      tags:
        - Candidates
      summary: Delete a candidate
      description: Delete the specified candidate
      operationId: deleteCandidate
      security:
        - ApiKeyAuth:
            - write
        - BearerAuth:
            - write
      parameters:
        - $ref: '#/components/parameters/candidateIdPathParam'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
      x-codeSamples:
        - lang: TypeScript
          source: |
            // add typescript code sample
  /elections:
    get:
      tags:
        - Election
      description: Get a list of elections
      operationId: getElections
      summary: Retrieve a list of elections
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ElectionResponse'
        '404':
          $ref: '#/components/responses/404Error'
    post:
      tags:
        - Election
      description: Add a new election
      operationId: postElection
      requestBody:
        description: Election request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectionRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectionResponse'
  '/elections/{id}':
    get:
      tags:
        - Election
      description: Get a list of elections
      operationId: getElection
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: Limits the number of items on a page
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: offset
          in: query
          description: Specifies the page number of the artists to be displayed
          required: false
          style: form
          explode: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ElectionResponse'
        '404':
          $ref: '#/components/responses/404Error'
  /elections/systems:
    get:
      tags:
        - Election
      description: Get a list of election systems
      operationId: getElectionSystems
      parameters:
        - name: limit
          in: query
          description: Limits the number of items on a page
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: offset
          in: query
          description: Specifies the page number of the artists to be displayed
          required: false
          style: form
          explode: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: Array of election systems
                items:
                  $ref: '#/components/schemas/ElectionSystem'
                example:
                  - id: d290f1ee-6c54-4b01-90e6-d701748f0851
                    label: mixed-member proportional representation
                    shortcode: MMP
                  - id: d290f1ee-6c54-4b01-90e6-d701748f0851
                    label: open list proportional representation
                    shortcode: OLP
        '404':
          $ref: '#/components/responses/404Error'
  /parties:
    get:
      tags:
        - Parties
      description: Returns a collection of Parties
      operationId: getParties
      parameters:
        - name: partyId
          in: query
          description: The ID of the Political Party to return
          required: false
          style: form
          explode: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            'application/json:':
              schema:
                $ref: '#/components/schemas/Party'
    post:
      tags:
        - Parties
      description: Create a new Candidate
      operationId: postParty
      requestBody:
        description: Political party to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Party'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/201Created'
    head:
      tags:
        - Parties
      description: HEAD request for parties
      operationId: headParties
      responses:
        '200':
          description: OK
  '/parties/{id}':
    get:
      tags:
        - Parties
      description: Returns a Political Party by ID
      operationId: getParty
      parameters:
        - name: id
          in: path
          description: The ID of the Political Party to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            'application/json:':
              schema:
                $ref: '#/components/schemas/Party'
          links:
            GetPartyMembers:
              operationId: GetCandidatesByParty
              parameters:
                politicalParty: $response.body#/id
    put:
      tags:
        - Parties
      description: Replace a Party
      operationId: putParty
      parameters:
        - name: id
          in: path
          description: The ID of the Political Party to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        description: Optional description in *Markdown*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Party'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/201Created'
    delete:
      tags:
        - Parties
      description: Delete a Party
      operationId: deleteParty
      parameters:
        - name: id
          in: path
          description: The ID of the Political Party to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '201':
          $ref: '#/components/responses/201Created'
    patch:
      tags:
        - Parties
      description: Partially update a Party
      operationId: patchParty
      parameters:
        - name: id
          in: path
          description: The ID of the Political Party to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        description: Optional description in *Markdown*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Party'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/201Created'
components:
  parameters:
    limitParam:
      name: limit
      in: query
      description: Limits the number of items on a page
      required: false
      style: form
      explode: true
      schema:
        type: integer
    offsetParam:
      name: offset
      in: query
      description: Specifies the offset from the start of the list of results
      required: false
      style: form
      explode: true
      schema:
        type: integer
    partyIdQueryParam:
      name: partyId
      in: query
      description: ID of the party to be filtered by
      required: false
      style: form
      explode: true
      schema:
        type: integer
    candidateIdQueryParam:
      name: candidateId
      in: query
      description: ID of the candidate to be filtered by
      required: false
      style: form
      explode: true
      schema:
        type: integer
    candidateIdPathParam:
      name: id
      in: path
      description: The ID of the candidate to return
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    Candidate:
      name: candidate
      in: query
      description: ID of the candidate to be filtered by
      required: false
      style: form
      explode: true
      schema:
        type: integer
    PartyId:
      name: party
      in: query
      description: ID of the party to be filtered by
      required: false
      style: form
      explode: true
      schema:
        type: integer
  schemas:
    ElectionResponse:
      type: object
      required:
        - date
        - id
        - label
        - polity
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        polity:
          $ref: '#/components/schemas/Polity'
        date:
          type: string
          format: date-time
        label:
          type: string
          example: Bundestagswahl 2021
    ElectionRequest:
      required:
        - date
        - label
        - polity_id
      type: object
      properties:
        polity_id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        date:
          type: string
          format: date-time
        label:
          type: string
          example: Bundestagswahl 2021
    Polity:
      required:
        - election_system
        - id
        - label
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        election_system:
          $ref: '#/components/schemas/ElectionSystem'
        label:
          type: string
          example: Bundesrepublik Deutschland
    ElectionSystem:
      type: object
      description: Schema for an election system
      required:
        - id
        - label
        - shortcode
      properties:
        id:
          type: string
          format: uuid
        label:
          type: string
        shortcode:
          type: string
      example:
        $ref: '#/components/examples/electionSystemExample/value'
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Candidate:
      description: Electoral Candidate for political office
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        image:
          $ref: '#/components/schemas/CandidateImage'
        party:
          type: integer
      example:
        $ref: '#/components/examples/candidateExample/value'
    Constituency:
      description: Electoral Constituency
    Party:
      description: Political Party
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          example: CDU/CSU
    Poll:
      properties:
        id:
          type: integer
          readOnly: true
        label:
          type: string
        result:
          $ref: '#/components/schemas/PollResult'
      description: Parliamentary Poll
    Vote:
      properties:
        id:
          type: integer
          readOnly: true
        candidate:
          type: integer
        poll:
          type: integer
      description: Vote on Parliamentary Poll
    Controversy:
      required:
        - candidate
        - id
        - label
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        label:
          type: string
          example: Augustus Intelligence
        candidate:
          $ref: '#/components/schemas/Candidate'
      description: Controversy related to a candidate
    ControversyArticle:
      required:
        - id
        - url
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        url:
          type: string
          format: url
      description: Article about a controversy
    CandidateImageBbox:
      type: object
      properties:
        minX:
          type: number
          format: double
          example: 0
        maxX:
          type: number
          format: double
          example: 2746
        minY:
          type: number
          format: double
          example: 0
        maxY:
          type: number
          format: double
          example: 2746
    CandidateImage:
      type: object
      properties:
        src:
          type: string
          example: 'https://commons.wikimedia.org/wiki/File:Philipp_Amthor.jpg#/media/File:Philipp_Amthor.jpg'
        bbox:
          $ref: '#/components/schemas/CandidateImageBbox'
    PollResult:
      type: object
      properties:
        'true':
          type: integer
        'false':
          type: integer
        abstain:
          type: integer
        no_vote:
          type: integer
    inline_response_404:
      type: object
      properties:
        message:
          type: string
    inline_response_201:
      type: object
      properties:
        id:
          type: integer
  responses:
    400Error:
      description: Bad Request
    404Error:
      description: The specified resource was not found.
    201Created:
      description: The specified resource was created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    204NoContent:
      description: No Content
    200OK:
      description: OK
    200Candidate:
      description: OK
      content:
        'application/json:':
          schema:
            $ref: '#/components/schemas/Candidate'
          example:
            $ref: '#/components/examples/candidateExample/value'
      links:
        - $ref: '#/components/links/GetCandidateParty'
    200Candidates:
      description: Successfully returned a list of candidates
      content:
        'application/json:':
          schema:
            type: array
            description: Array of Candidates
            items:
              $ref: '#/components/schemas/Candidate'
            example:
              $ref: '#/components/examples/candidatesExample/value'
          example:
            $ref: '#/components/examples/candidatesExample/value'
  examples:
    candidatesExample:
      value:
        - id: 1
          name: Philipp Amthor
          image:
            src: 'https://commons.wikimedia.org/wiki/File:Philipp_Amthor.jpg#/media/File:Philipp_Amthor.jpg'
            bbox:
              minX: 0
              maxX: 2746
              minY: 0
              maxY: 2746
          party: 1
    candidateExample:
      value:
        id: 1
        name: Philipp Amthor
        image:
          src: 'https://commons.wikimedia.org/wiki/File:Philipp_Amthor.jpg#/media/File:Philipp_Amthor.jpg'
          bbox:
            minX: 0
            maxX: 2746
            minY: 0
            maxY: 2746
        party: 1
    electionSystemExample:
      value:
        id: d290f1ee-6c54-4b01-90e6-d701748f0851
        label: mixed-member proportional representation
        shortcode: MMP
  links:
    GetCandidateParty:
      operationId: getParty
      parameters:
        partyId: $response.body#/party
  requestBodies:
    candidateRequest:
      description: Optional description in *Markdown*
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Candidate'
          example:
            $ref: '#/components/examples/candidateExample/value'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
