/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Parliament REST API
 * RESTful API for Candidates, Constituencies, Parliaments, Polls, Votes etc.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://virtserver.swaggerhub.com/Face-the-Facts/ParliamentAPI/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * Electoral Candidate for political office
 * @export
 * @interface Candidate
 */
export interface Candidate {
    /**
     * 
     * @type {number}
     * @memberof Candidate
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Candidate
     */
    name?: string;
    /**
     * 
     * @type {CandidateImage}
     * @memberof Candidate
     */
    image?: CandidateImage;
    /**
     * 
     * @type {number}
     * @memberof Candidate
     */
    party?: number;
}
/**
 * 
 * @export
 * @interface CandidateImage
 */
export interface CandidateImage {
    /**
     * 
     * @type {string}
     * @memberof CandidateImage
     */
    src?: string;
    /**
     * 
     * @type {CandidateImageBbox}
     * @memberof CandidateImage
     */
    bbox?: CandidateImageBbox;
}
/**
 * 
 * @export
 * @interface CandidateImageBbox
 */
export interface CandidateImageBbox {
    /**
     * 
     * @type {number}
     * @memberof CandidateImageBbox
     */
    minX?: number;
    /**
     * 
     * @type {number}
     * @memberof CandidateImageBbox
     */
    maxX?: number;
    /**
     * 
     * @type {number}
     * @memberof CandidateImageBbox
     */
    minY?: number;
    /**
     * 
     * @type {number}
     * @memberof CandidateImageBbox
     */
    maxY?: number;
}
/**
 * Electoral Constituency
 * @export
 * @interface Constituency
 */
export interface Constituency {
}
/**
 * 
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse201
     */
    id?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse400
 */
export interface InlineResponse400 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse400
     */
    message?: string;
}
/**
 * Political Party
 * @export
 * @interface Party
 */
export interface Party {
    /**
     * 
     * @type {number}
     * @memberof Party
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Party
     */
    name?: string;
}
/**
 * Parliamentary Poll
 * @export
 * @interface Poll
 */
export interface Poll {
}
/**
 * Vote on Parliamentary Poll
 * @export
 * @interface Vote
 */
export interface Vote {
    /**
     * 
     * @type {number}
     * @memberof Vote
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Vote
     */
    candidate?: number;
    /**
     * 
     * @type {number}
     * @memberof Vote
     */
    poll?: number;
}
/**
 * CandidatesApi - fetch parameter creator
 * @export
 */
export const CandidatesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a candidate by ID
         * @param {number} id The ID of the candidate to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidate(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCandidate.');
            }
            const localVarPath = `/candidates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of candidates
         * @param {number} [limit] Limits the number of items on a page
         * @param {number} [offset] Specifies the page number of the artists to be displayed
         * @param {number} [party] ID of the party to be filtered by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidates(limit?: number, offset?: number, party?: number, options: any = {}): FetchArgs {
            const localVarPath = `/candidates`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (party !== undefined) {
                localVarQueryParameter['party'] = party;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Candidate
         * @param {Candidate} body Optional description in *Markdown*
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCandidate(body: Candidate, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postCandidate.');
            }
            const localVarPath = `/candidates`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Candidate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CandidatesApi - functional programming interface
 * @export
 */
export const CandidatesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns a candidate by ID
         * @param {number} id The ID of the candidate to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidate(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Candidate> {
            const localVarFetchArgs = CandidatesApiFetchParamCreator(configuration).getCandidate(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of candidates
         * @param {number} [limit] Limits the number of items on a page
         * @param {number} [offset] Specifies the page number of the artists to be displayed
         * @param {number} [party] ID of the party to be filtered by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidates(limit?: number, offset?: number, party?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Candidate>> {
            const localVarFetchArgs = CandidatesApiFetchParamCreator(configuration).getCandidates(limit, offset, party, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new Candidate
         * @param {Candidate} body Optional description in *Markdown*
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCandidate(body: Candidate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse201> {
            const localVarFetchArgs = CandidatesApiFetchParamCreator(configuration).postCandidate(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CandidatesApi - factory interface
 * @export
 */
export const CandidatesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Returns a candidate by ID
         * @param {number} id The ID of the candidate to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidate(id: number, options?: any) {
            return CandidatesApiFp(configuration).getCandidate(id, options)(fetch, basePath);
        },
        /**
         * Returns a list of candidates
         * @param {number} [limit] Limits the number of items on a page
         * @param {number} [offset] Specifies the page number of the artists to be displayed
         * @param {number} [party] ID of the party to be filtered by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidates(limit?: number, offset?: number, party?: number, options?: any) {
            return CandidatesApiFp(configuration).getCandidates(limit, offset, party, options)(fetch, basePath);
        },
        /**
         * Create a new Candidate
         * @param {Candidate} body Optional description in *Markdown*
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCandidate(body: Candidate, options?: any) {
            return CandidatesApiFp(configuration).postCandidate(body, options)(fetch, basePath);
        },
    };
};

/**
 * CandidatesApi - object-oriented interface
 * @export
 * @class CandidatesApi
 * @extends {BaseAPI}
 */
export class CandidatesApi extends BaseAPI {
    /**
     * Returns a candidate by ID
     * @param {number} id The ID of the candidate to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidatesApi
     */
    public getCandidate(id: number, options?: any) {
        return CandidatesApiFp(this.configuration).getCandidate(id, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a list of candidates
     * @param {number} [limit] Limits the number of items on a page
     * @param {number} [offset] Specifies the page number of the artists to be displayed
     * @param {number} [party] ID of the party to be filtered by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidatesApi
     */
    public getCandidates(limit?: number, offset?: number, party?: number, options?: any) {
        return CandidatesApiFp(this.configuration).getCandidates(limit, offset, party, options)(this.fetch, this.basePath);
    }

    /**
     * Create a new Candidate
     * @param {Candidate} body Optional description in *Markdown*
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidatesApi
     */
    public postCandidate(body: Candidate, options?: any) {
        return CandidatesApiFp(this.configuration).postCandidate(body, options)(this.fetch, this.basePath);
    }

}
/**
 * PartiesApi - fetch parameter creator
 * @export
 */
export const PartiesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a Party
         * @param {number} id The ID of the Political Party to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParty(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteParty.');
            }
            const localVarPath = `/parties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a collection of Parties
         * @param {number} [partyId] The ID of the Political Party to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiesGet(partyId?: number, options: any = {}): FetchArgs {
            const localVarPath = `/parties`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (partyId !== undefined) {
                localVarQueryParameter['partyId'] = partyId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiesHead(options: any = {}): FetchArgs {
            const localVarPath = `/parties`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'HEAD' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Political Party by ID
         * @param {number} id The ID of the Political Party to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiesIdGet(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling partiesIdGet.');
            }
            const localVarPath = `/parties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially update a Party
         * @param {Party} body Optional description in *Markdown*
         * @param {number} id The ID of the Political Party to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchParty(body: Party, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchParty.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchParty.');
            }
            const localVarPath = `/parties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Party" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Candidate
         * @param {Party} body Optional description in *Markdown*
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postParty(body: Party, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postParty.');
            }
            const localVarPath = `/parties`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Party" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace a Party
         * @param {Party} body Optional description in *Markdown*
         * @param {number} id The ID of the Political Party to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putParty(body: Party, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putParty.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putParty.');
            }
            const localVarPath = `/parties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Party" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartiesApi - functional programming interface
 * @export
 */
export const PartiesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete a Party
         * @param {number} id The ID of the Political Party to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParty(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse201> {
            const localVarFetchArgs = PartiesApiFetchParamCreator(configuration).deleteParty(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a collection of Parties
         * @param {number} [partyId] The ID of the Political Party to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiesGet(partyId?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Party> {
            const localVarFetchArgs = PartiesApiFetchParamCreator(configuration).partiesGet(partyId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiesHead(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PartiesApiFetchParamCreator(configuration).partiesHead(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a Political Party by ID
         * @param {number} id The ID of the Political Party to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiesIdGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Party> {
            const localVarFetchArgs = PartiesApiFetchParamCreator(configuration).partiesIdGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Partially update a Party
         * @param {Party} body Optional description in *Markdown*
         * @param {number} id The ID of the Political Party to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchParty(body: Party, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse201> {
            const localVarFetchArgs = PartiesApiFetchParamCreator(configuration).patchParty(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new Candidate
         * @param {Party} body Optional description in *Markdown*
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postParty(body: Party, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse201> {
            const localVarFetchArgs = PartiesApiFetchParamCreator(configuration).postParty(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Replace a Party
         * @param {Party} body Optional description in *Markdown*
         * @param {number} id The ID of the Political Party to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putParty(body: Party, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse201> {
            const localVarFetchArgs = PartiesApiFetchParamCreator(configuration).putParty(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PartiesApi - factory interface
 * @export
 */
export const PartiesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Delete a Party
         * @param {number} id The ID of the Political Party to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParty(id: number, options?: any) {
            return PartiesApiFp(configuration).deleteParty(id, options)(fetch, basePath);
        },
        /**
         * Returns a collection of Parties
         * @param {number} [partyId] The ID of the Political Party to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiesGet(partyId?: number, options?: any) {
            return PartiesApiFp(configuration).partiesGet(partyId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiesHead(options?: any) {
            return PartiesApiFp(configuration).partiesHead(options)(fetch, basePath);
        },
        /**
         * Returns a Political Party by ID
         * @param {number} id The ID of the Political Party to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiesIdGet(id: number, options?: any) {
            return PartiesApiFp(configuration).partiesIdGet(id, options)(fetch, basePath);
        },
        /**
         * Partially update a Party
         * @param {Party} body Optional description in *Markdown*
         * @param {number} id The ID of the Political Party to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchParty(body: Party, id: number, options?: any) {
            return PartiesApiFp(configuration).patchParty(body, id, options)(fetch, basePath);
        },
        /**
         * Create a new Candidate
         * @param {Party} body Optional description in *Markdown*
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postParty(body: Party, options?: any) {
            return PartiesApiFp(configuration).postParty(body, options)(fetch, basePath);
        },
        /**
         * Replace a Party
         * @param {Party} body Optional description in *Markdown*
         * @param {number} id The ID of the Political Party to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putParty(body: Party, id: number, options?: any) {
            return PartiesApiFp(configuration).putParty(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * PartiesApi - object-oriented interface
 * @export
 * @class PartiesApi
 * @extends {BaseAPI}
 */
export class PartiesApi extends BaseAPI {
    /**
     * Delete a Party
     * @param {number} id The ID of the Political Party to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartiesApi
     */
    public deleteParty(id: number, options?: any) {
        return PartiesApiFp(this.configuration).deleteParty(id, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a collection of Parties
     * @param {number} [partyId] The ID of the Political Party to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartiesApi
     */
    public partiesGet(partyId?: number, options?: any) {
        return PartiesApiFp(this.configuration).partiesGet(partyId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartiesApi
     */
    public partiesHead(options?: any) {
        return PartiesApiFp(this.configuration).partiesHead(options)(this.fetch, this.basePath);
    }

    /**
     * Returns a Political Party by ID
     * @param {number} id The ID of the Political Party to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartiesApi
     */
    public partiesIdGet(id: number, options?: any) {
        return PartiesApiFp(this.configuration).partiesIdGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * Partially update a Party
     * @param {Party} body Optional description in *Markdown*
     * @param {number} id The ID of the Political Party to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartiesApi
     */
    public patchParty(body: Party, id: number, options?: any) {
        return PartiesApiFp(this.configuration).patchParty(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * Create a new Candidate
     * @param {Party} body Optional description in *Markdown*
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartiesApi
     */
    public postParty(body: Party, options?: any) {
        return PartiesApiFp(this.configuration).postParty(body, options)(this.fetch, this.basePath);
    }

    /**
     * Replace a Party
     * @param {Party} body Optional description in *Markdown*
     * @param {number} id The ID of the Political Party to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartiesApi
     */
    public putParty(body: Party, id: number, options?: any) {
        return PartiesApiFp(this.configuration).putParty(body, id, options)(this.fetch, this.basePath);
    }

}
